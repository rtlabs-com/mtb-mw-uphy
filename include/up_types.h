/********************************************************************
 *        _       _         _
 *  _ __ | |_  _ | |  __ _ | |__   ___
 * | '__|| __|(_)| | / _` || '_ \ / __|
 * | |   | |_  _ | || (_| || |_) |\__ \
 * |_|    \__|(_)|_| \__,_||_.__/ |___/
 *
 * http://www.rt-labs.com
 * Copyright 2022 rt-labs AB, Sweden.
 * See LICENSE file in the project root for full license information.
 ********************************************************************/

/*
 * Generated by erpcgen 1.9.1 on Thu Jun  5 12:51:59 2025.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#if !defined(_up_types_h_)
#define _up_types_h_

#if defined(__CC_ARM) || defined(__ARMCC_VERSION)
#pragma anon_unions
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


#if !defined(ERPC_TYPE_DEFINITIONS)
#define ERPC_TYPE_DEFINITIONS

// Enumerators data types declarations
typedef enum up_dtype_t
{
    UP_DTYPE_INT8 = 0,
    UP_DTYPE_UINT8 = 1,
    UP_DTYPE_INT16 = 2,
    UP_DTYPE_UINT16 = 3,
    UP_DTYPE_INT32 = 4,
    UP_DTYPE_UINT32 = 5,
    UP_DTYPE_REAL32 = 6
} up_dtype_t;

typedef enum up_core_status_t
{
    UP_CORE_CONNECTED = 1,
    UP_CORE_CONFIGURED = 2,
    UP_CORE_RUNNING = 4
} up_core_status_t;

typedef enum up_signal_status_t
{
    UP_STATUS_OK = 1
} up_signal_status_t;

typedef enum up_error_t
{
    UP_ERROR_NONE = 0,
    UP_ERROR_CORE_COMMUNICATION = 1,
    UP_ERROR_PARAMETER_WRITE = 2,
    UP_ERROR_PARAMETER_READ = 3,
    UP_ERROR_INVALID_PROFINET_MODULE_ID = 4,
    UP_ERROR_INVALID_PROFINET_SUBMODULE_ID = 5,
    UP_ERROR_INVALID_PROFINET_PARAMETER_INDEX = 6
} up_error_t;

typedef enum up_transport_t
{
    UP_TRANSPORT_SPI = 0,
    UP_TRANSPORT_UART = 1,
    UP_TRANSPORT_USB = 2,
    UP_TRANSPORT_TCP = 3,
    UP_TRANSPORT_INVALID = 255
} up_transport_t;

typedef enum up_event_t
{
    /**
     * Indication to the host that core has received (output) data from the PLC.
     */
    UP_EVENT_AVAIL = 1,
    /**
     * Indication to the host that core is about to send (input) data
     * to the PLC.
     */
    UP_EVENT_SYNC = 2,
    /**
     * Indication to the host that core has received one or more
     * parameter updates from the PLC.
     */
    UP_EVENT_PARAM_WRITE_IND = 4,
    /**
     * Adapter status change indication.
     * When the event is triggered, the host shall read the state from the core
     * using the upi_read_status() operation.
     */
    UP_EVENT_STATUS_IND = 8,
    /**
     * Message available indication.
     * When this event is triggered, the host shall poll the message queue
     * using the upi_get_message() operation.
     */
    UP_EVENT_MESSAGE_IND = 16,
    /**
     * Event mask for free running mode of operation. Events enabled:
     * UP_EVENT_PARAM_WRITE_IND
     * UP_EVENT_STATUS_IND
     * UP_EVENT_MESSAGE_IND
     */
    UP_EVENT_MASK_FREE_RUNNING_MODE = 28,
    /**
     * Event mask for synchronous mode of operation. Events enabled:
     * UP_EVENT_AVAIL
     * UP_EVENT_SYNC
     * UP_EVENT_PARAM_WRITE_IND
     * UP_EVENT_STATUS_IND
     * UP_EVENT_MESSAGE_IND
     */
    UP_EVENT_MASK_SYNCHRONOUS_MODE = 31,
    UP_EVENT_ALL = -1
} up_event_t;

typedef enum up_signal_flags_t
{
    /**
     * Set if signal is an array. Cleared for scalar signals.
     */
    UP_SIG_FLAG_IS_ARRAY = 1
} up_signal_flags_t;

typedef enum up_message_id_t
{
    UP_MESSAGE_ID_ERROR = 1,
    UP_MESSAGE_ID_PROFINET_SIGNAL_LED = 2
} up_message_id_t;

typedef enum up_perm_t
{
    UP_PERM_RO = 0,
    UP_PERM_RW = 1
} up_perm_t;

typedef enum up_bustype_t
{
    UP_BUSTYPE_MOCK = 0,
    UP_BUSTYPE_PROFINET = 1,
    UP_BUSTYPE_ECAT = 2,
    UP_BUSTYPE_ETHERNETIP = 3,
    UP_BUSTYPE_MODBUS = 4,
    UP_BUSTYPE_INVALID = 5
} up_bustype_t;

typedef enum up_alarm_level_t
{
    UP_ALARM_ERROR = 0,
    UP_ALARM_WARNING = 1,
    UP_ALARM_INFO = 2
} up_alarm_level_t;

// Aliases data types declarations
typedef struct binary_t binary_t;
typedef struct up_signal_info_t up_signal_info_t;
typedef struct up_message_t up_message_t;
typedef struct up_signal_t up_signal_t;
typedef struct up_frame_info_t up_frame_info_t;
typedef struct up_param_t up_param_t;
typedef struct up_alarm_t up_alarm_t;
typedef struct up_slot_t up_slot_t;
typedef struct up_slot_cfg_t up_slot_cfg_t;
typedef struct up_pn_param_t up_pn_param_t;
typedef struct up_pn_module_t up_pn_module_t;
typedef struct up_pn_slot_t up_pn_slot_t;
typedef struct up_profinet_config_t up_profinet_config_t;
typedef struct up_ciaobject_t up_ciaobject_t;
typedef struct up_ciapdo_t up_ciapdo_t;
typedef struct up_ecat_module_t up_ecat_module_t;
typedef struct up_ecat_slot_t up_ecat_slot_t;
typedef struct up_ecat_device_t up_ecat_device_t;
typedef struct up_mockadapter_config_t up_mockadapter_config_t;
typedef struct up_ethernetip_config_t up_ethernetip_config_t;
typedef struct up_modbus_config_t up_modbus_config_t;
typedef struct up_local_config_t up_local_config_t;
typedef struct up_device_t up_device_t;
typedef struct up_device_cfg_t up_device_cfg_t;
typedef union up_message_params_t up_message_params_t;
typedef union up_busconf_t up_busconf_t;

// Structures/unions data types declarations
struct binary_t
{
    uint8_t * data;
    uint32_t dataLength;
};

struct up_signal_info_t
{
    uint8_t *value;
    up_signal_status_t *status;
};

union up_message_params_t
{
    uint32_t error_code;
    uint8_t dummy;
};

struct up_message_t
{
    int32_t id;
    up_message_params_t params;
};

struct up_signal_t
{
    char * name;
    uint16_t ix;
    up_dtype_t datatype;
    uint16_t bitlength;
    uint16_t frame_offset;
    /** Offset to data in frame buffer */
    uint32_t flags;
    uint64_t default_value;
    uint64_t min_value;
    uint64_t max_value;
};

struct up_frame_info_t
{
    uint16_t total_size;
    uint16_t status_offset;
};

struct up_param_t
{
    char * name;
    uint16_t ix;
    up_dtype_t datatype;
    uint16_t bitlength;
    uint16_t frame_offset;
    uint32_t flags;
    uint32_t permissions;
    binary_t default_value;
    binary_t min_value;
    binary_t max_value;
};

struct up_alarm_t
{
    up_alarm_level_t level;
    uint16_t error_code;
};

struct up_slot_t
{
    char * name;
    uint16_t n_inputs;
    up_signal_t * inputs;
    uint16_t input_bitlength;
    /** Total size signals value + status */
    uint16_t n_outputs;
    up_signal_t * outputs;
    uint16_t output_bitlength;
    /** Total size signals value + status */
    uint16_t n_params;
    up_param_t * params;
};

struct up_slot_cfg_t
{
    char * name;
    uint16_t input_bitlength;
    /** Total size signals value + status */
    uint16_t output_bitlength;
    /** Total size signals value + status */
    uint16_t n_inputs;
    uint16_t n_outputs;
    uint16_t n_params;
};

struct up_pn_param_t
{
    uint32_t pn_index;
};

struct up_pn_module_t
{
    uint32_t module_id;
    uint32_t submodule_id;
    uint16_t n_params;
    up_pn_param_t * params;
};

struct up_pn_slot_t
{
    uint16_t module_ix;
};

struct up_profinet_config_t
{
    uint16_t vendor_id;
    uint16_t device_id;
    uint32_t dap_module_id;
    uint32_t dap_identity_submodule_id;
    uint32_t dap_interface_submodule_id;
    uint32_t dap_port_1_submodule_id;
    uint32_t dap_port_2_submodule_id;
    uint16_t profile_id;
    uint16_t profile_specific_type;
    uint16_t min_device_interval;
    char * default_stationname;
    char * order_id;
    uint16_t hw_revision;
    uint8_t sw_revision_prefix;
    uint8_t sw_revision_functional_enhancement;
    uint8_t sw_revision_bug_fix;
    uint8_t sw_revision_internal_change;
    uint16_t revision_counter;
    uint16_t n_modules;
    uint16_t n_slots;
    up_pn_module_t * modules;
    up_pn_slot_t * slots;
};

struct up_ciaobject_t
{
    uint16_t index;
    uint8_t subindex;
    bool is_signal;
    uint16_t signal_or_param_ix;
};

struct up_ciapdo_t
{
    char * name;
    uint16_t index;
    uint8_t n_entries;
    up_ciaobject_t * entries;
};

struct up_ecat_module_t
{
    uint32_t profile;
    uint8_t n_rxpdos;
    uint8_t n_txpdos;
    uint8_t n_objects;
    up_ciapdo_t * rxpdos;
    up_ciapdo_t * txpdos;
    up_ciaobject_t * objects;
};

struct up_ecat_slot_t
{
    uint8_t module_ix;
};

struct up_ecat_device_t
{
    uint32_t profile;
    uint32_t vendor;
    uint32_t productcode;
    uint32_t revision;
    uint32_t serial;
    char * hw_rev;
    char * sw_rev;
    uint16_t pdo_increment;
    uint16_t index_increment;
    uint8_t n_modules;
    uint8_t n_slots;
    up_ecat_module_t * modules;
    up_ecat_slot_t * slots;
};

struct up_mockadapter_config_t
{
    uint8_t vendor_id;
};

struct up_ethernetip_config_t
{
    uint16_t vendor_id;
    uint16_t device_type;
    uint16_t product_code;
    uint8_t major_revision;
    uint8_t minor_revision;
    uint32_t min_data_interval;
    uint32_t default_data_interval;
    uint16_t input_assembly_id;
    uint16_t output_assembly_id;
    uint16_t config_assembly_id;
    uint16_t input_only_heartbeat_assembly_id;
    uint16_t listen_only_heartbeat_assembly_id;
};

struct up_modbus_config_t
{
    uint8_t id;
    uint16_t port;
};

union up_busconf_t
{
    up_mockadapter_config_t mock;
    up_profinet_config_t profinet;
    up_ecat_device_t ecat;
    up_ethernetip_config_t ethernetip;
    up_modbus_config_t modbus;
};

struct up_local_config_t
{
    char * serial_number;
    bool webgui_enable;
};

struct up_device_t
{
    char * name;
    up_local_config_t cfg;
    up_bustype_t bustype;
    uint16_t n_slots;
    up_slot_t * slots;
};

struct up_device_cfg_t
{
    char * name;
    up_local_config_t cfg;
    uint16_t n_slots;
};


#endif // ERPC_TYPE_DEFINITIONS


#endif // _up_types_h_
